worker_processes auto;

events {
  worker_connections 1024;
}

http {
  include mime.types;
  default_type application/octet-stream;

  sendfile on;
  keepalive_timeout 65;

  lua_package_path "/etc/nginx/lua/?.lua;;";

  access_log /dev/stdout;
  error_log /dev/stderr info;

  upstream auth_service {
    server auth-service-app-1:8001;
  }

  upstream pokemon_service {
    server pokemon-api-app-1:8000;
  }

  lua_shared_dict jwt_cache 10m;

  server {
    listen 80;
    server_name localhost;

    # Allow dynamic origin for CORS
    set $allowed_origin "*";


    location /pokemon/ {
      proxy_pass http://pokemon_service/;
      proxy_set_header Host $host;
      proxy_set_header X-Real-IP $remote_addr;
      proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;

      if ($http_origin ~* .*) {
        set $allowed_origin $http_origin;
      }

      add_header Access-Control-Allow-Origin $allowed_origin;
      add_header Access-Control-Allow-Credentials true;
      add_header Access-Control-Allow-Methods "GET, POST, PUT, DELETE, OPTIONS";
      add_header Access-Control-Allow-Headers
        "Authorization, Content-Type, X-Requested-With";

      if ($request_method = OPTIONS) {
        add_header Access-Control-Allow-Origin $allowed_origin;
        add_header Access-Control-Allow-Credentials true;
        add_header Access-Control-Allow-Methods "GET, POST, PUT, DELETE, OPTIONS";
        add_header Access-Control-Allow-Headers
          "Authorization, Content-Type, X-Requested-With";
        add_header Content-Length 0;
        add_header Content-Type text/plain;
        return 204;
      }

    }


    location /auth/ {
      proxy_pass http://auth_service/;
      proxy_set_header Host $host;
      proxy_set_header X-Real-IP $remote_addr;
      proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;

      if ($http_origin ~* .*) {
        set $allowed_origin $http_origin;
      }

      add_header Access-Control-Allow-Origin $allowed_origin;
      add_header Access-Control-Allow-Credentials true;
      add_header Access-Control-Allow-Methods "GET, POST, PUT, DELETE, OPTIONS";
      add_header Access-Control-Allow-Headers
        "Authorization, Content-Type, X-Requested-With";

      # Handle preflight requests
      if ($request_method = OPTIONS) {
        add_header Access-Control-Allow-Origin $allowed_origin;
        add_header Access-Control-Allow-Credentials true;
        add_header Access-Control-Allow-Methods "GET, POST, PUT, DELETE, OPTIONS";
        add_header Access-Control-Allow-Headers
          "Authorization, Content-Type, X-Requested-With";
        add_header Content-Length 0;
        add_header Content-Type text/plain;
        return 204;
      }
    }

    location / {
      return 404;
    }
  }
}